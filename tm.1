.Dd March 30, 2023
.Dt TM 1
.Os
.Sh NAME
.Nm tm
.Nd run Turing machines
.Sh SYNOPSIS
.Nm
.Op Fl b Ar blank
.Op Fl s Ar steps
.Op Fl qtT
.Ar machine
.Nm
.Fl B Ar num
.Op Fl s Ar steps
.Op Fl qtT
.Sh DESCRIPTION
.Nm
runs the Turing machine described in a
.Ar machine
file consisting of lines in the form
.Ic srwmt ,
where
.Ic s
and
.Ic t
are machine states,
.Ic r
and
.Ic w
are tape symbols, and
.Ic m
is a move
.Po
.Sq L
for left,
.Sq R
for right,
.Sq N
for nothing
.Pc .
The tape symbols and state names must be printable characters.
Every line describes an instruction:
in a state
.Ic s ,
if you read
.Ic r
on the tape, write
.Ic w
to the tape,
move left or right as per
.Ic m ,
and change your state to
.Ic t .
Initially, the machine is in the
.Ic s
state of the first instruction.
The machine is required to be deterministic,
i.e. there can only be one instruction for every
.Ic sr
combination.
The machine halts if there is no instruction for the current
.Ic s
state and
.Ic r
input.
.Pp
The initial tape content is given by a line of standard input.
The line may only contain printable characters.
By default,
.Sq 0
is considered the blank symbol.
The machine head is initially positioned at
the first non-blank symbol on the tape, if any.
Otherwise, the head is positioned in the middle of the tape.
If and when the machine halts,
.Nm
prints the eventual content of the tape
(so computations can be easily piped).
.Pp
If there are more input lines (tapes),
another computation of the same machine starts,
until the input is exhausted.
.Pp
The options are as follows:
.Pp
.Bl -tag -width xxxxxxxx -compact
.It Fl B Ar num
Run the busy beaver competition for machines having
.Ar num
states.
.It Fl b Ar X
Consider
.Sq X
to be the blank symbol instead of the default
.Sq 0 .
.It Fl q
Do not print the content of the tape upon halting.
.It Fl s Ar steps
Halt the machine after this this many steps.
.It Fl t
Display the tape before every step of the machine.
.It Fl T
Like
.Fl t ,
with the head position and state indicated.
.El
.Sh EXAMPLES
The following machine is the winner of the Busy Beaver competiton
for machines with two active states.
.Pp
.Dl A01RB
.Dl A11LB
.Dl B01LA
.Dl B11RH
.Pp
.Dl $ echo 000000 | tm    bb2.tm
.Dl $ echo 000000 | tm -T bb2.tm
.Dl $ echo 000000 | tm -T bb2.tm | less
.Dl $ echo 000000 | tm -T bb2.tm | a2ps
.Sh AUTHORS
.An Jan Stary Aq Mt hans@stare.cz
.Sh CAVEATS
.Nm
.Fl B Ar num
generates the Turing machines having
.Ar num
states and runs them on an empty tape,
reporting the machine that said the biggest number.
Obviously, that is impossible to implement,
as the number of steps a machine with
.Ar num
states could take grows faster than any computable function.
The only way to make this work, for small numbers at least,
is to artificially limit the running time with the
.Fl s
option, thus solving the halting problem.
